name: Deploy Docker Image to ECR and ECS

on:
  workflow_dispatch:
    inputs:
      aws_environment:
        description: 'AWS Environment for deployment'
        required: true
        type: choice
        options:
          - dev
          - production
      aws_region:
        description: 'AWS region (default: us-west-2)'
        required: false
        default: 'us-west-2'
      image_tag:
        description: 'Docker image tag (e.g., latest, sha, version)'
        required: false
        default: 'latest'

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  deploy:
    name: Build, Push Docker Image to ECR, and Deploy to ECS
    runs-on: ubuntu-latest

    env:
      CONFIG_FILE: deploy-config.yaml

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: List Directory Contents (Debugging Step)
        run: |
          echo "Current Directory Structure:"
          ls -R

      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Load Deployment Config
        id: load-config
        run: |
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "‚ùå Config file not found: $CONFIG_FILE"
            exit 1
          fi

          ENV="${{ github.event.inputs.aws_environment }}"
          REGION="${{ github.event.inputs.aws_region }}"
          TAG="${{ github.event.inputs.image_tag }}"

          AWS_ACCOUNT_ID=$(yq e ".environments.\"$ENV\".aws_account_id" $CONFIG_FILE)
          CLUSTER=$(yq e ".environments.\"$ENV\".cluster" $CONFIG_FILE)
          ECR_REPO=$(yq e ".environments.\"$ENV\".services.demo_flask_app.ECR_REPOSITORY" $CONFIG_FILE)
          ECS_SERVICE=$(yq e ".environments.\"$ENV\".services.demo_flask_app.ECS_SERVICE_NAME" $CONFIG_FILE)

          # If tag is "latest" or empty, create timestamp tag
          if [ -z "$TAG" ] || [ "$TAG" = "latest" ]; then
            TAG=$(date +'%Y%m%d-%H%M%S')
          fi

          echo "‚úÖ Config loaded successfully."
          echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_ENV
          echo "CLUSTER=$CLUSTER" >> $GITHUB_ENV
          echo "ECR_REPO=$ECR_REPO" >> $GITHUB_ENV
          echo "ECS_SERVICE=$ECS_SERVICE" >> $GITHUB_ENV
          echo "IMAGE_TAG=$TAG" >> $GITHUB_ENV
          echo "AWS_REGION=$REGION" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
            docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
            
      - name: Create ECR Repository if not exists
        run: |
          aws ecr describe-repositories --repository-names demo-flask-app --region ${{ env.AWS_REGION }} || \
          aws ecr create-repository --repository-name demo-flask-app --region ${{ env.AWS_REGION }}

      - name: Build, Tag, and Push Docker Image to ECR
        run: |
          echo "üî® Building Docker image..."
          docker build -t demo-flask-app .
          
          echo "üè∑Ô∏è Tagging Docker image..."
          docker tag demo-flask-app ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:${{ env.IMAGE_TAG }}
          
          echo "üì§ Pushing Docker image to ECR..."
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:${{ env.IMAGE_TAG }}
          
          echo "‚úÖ Image successfully pushed: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:${{ env.IMAGE_TAG }}"

      - name: Force New Deployment in ECS
        run: |
          echo "üîÑ Forcing ECS Service to redeploy..."
          aws ecs update-service \
            --cluster ${{ env.CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}
          echo "üöÄ ECS Service deployment triggered successfully."

      - name: Log Deployment Status
        run: |
          echo "üéâ Deployment completed successfully!"
          echo "AWS Environment: ${{ github.event.inputs.aws_environment }}"
          echo "AWS Region: ${{ env.AWS_REGION }}"
          echo "ECR Repository: ${{ env.ECR_REPO }}"
          echo "ECS Service: ${{ env.ECS_SERVICE }}"
          echo "Docker Image Tag: ${{ env.IMAGE_TAG }}"
